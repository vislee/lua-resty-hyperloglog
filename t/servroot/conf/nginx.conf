worker_processes  1;
daemon on;
master_process off;
error_log /Users/liwenqiang1/work/src/github.com/vislee/lua-resty-hyperloglog/t/servroot/logs/error.log debug;
pid       /Users/liwenqiang1/work/src/github.com/vislee/lua-resty-hyperloglog/t/servroot/logs/nginx.pid;
env MOCKEAGAIN_VERBOSE;
env MOCKEAGAIN;
env MOCKEAGAIN_WRITE_TIMEOUT_PATTERN;
env LD_PRELOAD;
env LD_LIBRARY_PATH;
env DYLD_INSERT_LIBRARIES;
env DYLD_FORCE_FLAT_NAMESPACE;
#env LUA_PATH;
#env LUA_CPATH;



http {
    access_log /Users/liwenqiang1/work/src/github.com/vislee/lua-resty-hyperloglog/t/servroot/logs/access.log;
    #access_log off;

    default_type text/plain;
    keepalive_timeout  68;

    lua_package_path 'lib/?.lua;;';
    lua_shared_dict test1 10m;

    init_by_lua_block {
        require 'luacov.tick'
        jit.off()
    }


    server {
        listen          1984;
        server_name     'localhost';

        client_max_body_size 30M;
        #client_body_buffer_size 4k;

        # Begin preamble config...

        # End preamble config...

        # Begin test case config...
    location /t {
        content_by_lua_block {
            local hll = require "resty.hyperloglog"
            local h1 = hll.new("test1", 12)
            for i = 1, 1000 do
                h1:insert("/hello/world" .. i)
                h1:insert("/foo/bar" .. i)
            end
            ngx.print("h1_count:", h1:count())

            local h2 = hll.new("test2", 12)
            for i = 1, 30 do
                h2:insert("/hello/world" .. i)
                h2:insert("/foo/bar/foo" .. i)
            end
            ngx.print(" h2_count:", h2:count())

            local ok, err = h1:merge(h2)
            if not ok then
                ngx.log(ngx.ERR, "merge error.", err)
            end
            ngx.print(" merge_count:", h1:count())
            ngx.exit(ngx.HTTP_OK)
        }
    }

        # End test case config.

        location / {
            root /Users/liwenqiang1/work/src/github.com/vislee/lua-resty-hyperloglog/t/servroot/html;
            index index.html index.htm;
        }
    }
}



#timer_resolution 100ms;

events {
    accept_mutex off;

    worker_connections  64;
}
env ASAN_OPTIONS;
env MOCKNOEAGAIN_VERBOSE;
env MOCKNOEAGAIN;
